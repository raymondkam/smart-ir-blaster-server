#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-websocket-server:server');
const https = require('https');

const WebSocket = require('ws');
const wsConfig = require('../config/websocket.json');

const fs = require('fs');
const path = require('path');
const privateKeyPath = path.join(__dirname, '..', 'sslcert', 'key.pem');
const certificatePath = path.join(__dirname, '..', 'sslcert', 'cert.pem');
const privateKey  = fs.readFileSync(privateKeyPath, 'utf8');
const certificate = fs.readFileSync(certificatePath, 'utf8');

const credentials = {key: privateKey, cert: certificate};

const api = require('../routes/api');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTPS server.
 */

const server = https.createServer(credentials, app);

/**
 * WebSocket setup
 */
const wss = new WebSocket.Server({ server });

wss.on('connection', function connection(ws, req) {
    // TODO: check to see if it is the ip of the raspberry pi/your home public ip
    // const ip = req.connection.remoteAddress;
    // console.log("ip address 1: ", req.ip);

    ws.on('message', function incoming(message) {
        const messageJSON = JSON.parse(message);
        if (messageJSON.token === wsConfig.token && messageJSON.type === "auth") {
            console.log('new valid ws client connected');
            api.setWsClient(ws);

            ws.send(JSON.stringify(
                {
                    "type": "auth",
                    "message": "success"
                }
            ));

            ws.on('message', function incoming(message) {
                console.log("received subsequent message from trusted client: " + message);
            });
            ws.on('close', function close() {
                console.log('websocket connection closed');
                api.setWsClient(null);
            });
        } else {
            ws.send(JSON.stringify(
                {
                    "type": "auth",
                    "message": "failure"
                }
            ));
            console.log('failed to auth, close connection');
            ws.close(1003, "Missing or bad token");
        }
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;
